import { sequelize } from '@auth/database';
import { IAuthDocument } from '@colson0x1/tradenexus-shared';
import { DataTypes, ModelDefined, Optional } from 'sequelize';

// `bcrypt` is written in C++ most likely and `bcryptjs` is written in plain
// JavaScript. Since bcryptjs is much slower than bcrypt, its recommended to
// use just `bcrypt` in production.
// bcrypt used to conflict with this node-gyp package with older node versions
// perhaps below v5. But the security issues has been resolved in v6 and modern
// versions.
// Both bcrypt and bcryptjs has the same methods. I recommend, bcrypt for
// production.

// This type will contain some optional types that we're not going to send
// when creating the users.
// `Optional` takes two properties. First one is the normal documents i.e
// IAuthDocument and the second part is where we define the properties that
// we're not going to send while creating the user. For example, im not going
// to send an ID. The `id` will be autogenerated. Also, i wont be sending
// `createdAt`. createdAt also will be autogenerated. And likewise,
// passwordResetToken and passwordResetExpires will be null.
type AuthUserCreationAttributes = Optional<IAuthDocument, 'id' | 'createdAt' | 'passwordResetToken' | 'passwordResetExpires'>;

// @ Auth Model
// Basically letting sequelize know that those properties on
// AuthUSerCreationAttributes are optional properties. So we can create the
// table or create the row for a user without adding those optional properties.
// They will be autogenerated.
const AuthModel: ModelDefined<IAuthDocument, AuthUserCreationAttributes> = sequelize.define('auths', {
  username: {
    type: DataTypes.STRING,
    allowNull: false
  },
  password: {
    type: DataTypes.STRING,
    allowNull: false
  },
  // This field is going to be the publicId that will be used to upload the
  // profile picture to Cloudinary
  profilePublicId: {
    type: DataTypes.STRING,
    allowNull: false
  },
  email: {
    type: DataTypes.STRING,
    allowNull: false
  },
  country: {
    type: DataTypes.STRING,
    allowNull: false
  },
  // profilePicture is going to be a string. Once uploaded to the Cloudinary,
  // we get a URL. So that URL will be added here. And we'll not allow it to
  // be empty.
  profilePicture: {
    type: DataTypes.STRING,
    allowNull: false
  },
  // emailVerificationToken is going to be string but we're going to allow it
  // to be null. So when the user creates an account, we've the field, we've
  // the token. Then once the user verifies the account, im going to set the
  // value to null.
  emailVerificationToken: {
    type: DataTypes.STRING,
    allowNull: true
  },
  // In MySQL, Booleans are represented with 0s and 1s.
  // Im gonna add a defaultValue of 0 i.e the user has not verified their
  // account.
  emailVerified: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: 0
  },
  createdAt: {
    type: DataTypes.DATE,
    // So at the time when the value is being added to the database, that is
    // what is going to be added as the createdAt date.
    defaultValue: Date.now
  },
  passwordResetToken: { type: DataTypes.STRING, allowNull: true },
  passwordResetExpires: {
    type: DataTypes.DATE,
    allowNull: false,
    // We can use `date.now` or `new Date()`
    defaultValue: new Date()
  }
});
